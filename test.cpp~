#include<iostream>
#include<cstdio>
#include<map>
#include<string.h>
using namespace std;

#define MAXN 3000001

int ways[MAXN],child[MAXN][26],gone[MAXN];
char buff[20];

int change(char ch) {
    return ch-'a';
}

void Trie(int n) {
    int C=1;
    memset(ways,0,sizeof(ways));
    memset(child,0,sizeof(child));
    for (int i=0;i<n;i++) {
	scanf("%s",buff);
	int len=strlen(buff),p=1;
	for (int i=0;i<len;i++){
	    int ch=change(buff[i]);
	    if (!child[p][ch])
		child[p][ch]=++C;
	    p=child[p][ch];
	    ways[p]++;
	}
    }
}

void dfs(int step,int len,int th,int no) {
    //	cout<<no<<' '<<buff[step]<<' '<<ways[no]<<endl;
    if (step==len) {
	gone[no]=2;
	return ;
    }
    if (!gone[no]) gone[no]=1;
    int ch=change(buff[step]);
    if (child[no][ch])
	dfs(step+1,len,th,child[no][ch]);
    if (th) {
	dfs(step+1,len,th-1,no);
	for (int i=0;i<26;i++)
	    if (child[no][i]){
		dfs(step+1,len,th-1,child[no][i]);
		dfs(step,len,th-1,child[no][i]);
	    }
    }
}

int calc(int no) {
    int ans=0;
    if (gone[no]==2)
	return ways[no];
    for (int i=0;i<26;i++)
	if (gone[child[no][i]])
	    ans+=calc(child[no][i]);
    return ans;
}

void clear(int no) {
    if (gone[no]) gone[no]=0;
    for (int i=0;i<26;i++)
	if (gone[child[no][i]]) clear(child[no][i]);
}

int main(){
    int n,m,k;
    memset(gone,0,sizeof(gone));
    while (scanf("%d",&n)!=EOF) {
	Trie(n);
	scanf("%d",&m);
	for (int i=1;i<=m;i++) {
	    scanf("%s%d",buff,&k);
	    dfs(0,strlen(buff),k,1);
	    int ans=calc(1);
	    clear(1);
	    printf("%d\n",ans);
	}
    }
    return 0;
}
